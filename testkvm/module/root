#!/bin/echo Use as an argument to mkroot.sh

[ -z "$TARGET" ] && TARGET="$(uname -m)"

# Each target needs board, serial console, RTC, ethernet, block device.

# Target-specific info in an if/else staircase

if [ "$TARGET" == armv5l ]
then

  # This could use the same VIRT board as armv7, but let's demonstrate a
  # different one requiring a separate device tree binary.
  QEMU="qemu-system-arm -M versatilepb -net nic,model=rtl8139 -net user"
  KARCH=arm
  KARGS="console=ttyAMA0"
  VMLINUX=arch/arm/boot/zImage

  DTB=arch/arm/boot/dts/versatile-pb.dtb
elif [ "$TARGET" == armv7l ] || [ "$TARGET" == aarch64 ]
then
  if [ "$TARGET" == aarch64 ]
  then
    QEMU="qemu-system-aarch64 -M virt -cpu cortex-a57"
    KARCH=arm64
    VMLINUX=arch/arm64/boot/Image
  else
    QEMU="qemu-system-arm -M virt"
    KARCH=arm
    VMLINUX=arch/arm/boot/zImage
  fi
  KARGS="console=ttyAMA0"
elif [ "$TARGET" == i486 ] || [ "$TARGET" == i686 ] ||
     [ "$TARGET" == x86_64 ] || [ "$TARGET" == x32 ]
then
  if [ "$TARGET" == i486 ]
  then
    QEMU="qemu-system-i386 -cpu 486 -global fw_cfg.dma_enabled=false"
  elif [ "$TARGET" == i686 ]
  then
    QEMU="qemu-system-i386 -cpu pentium3"
  else
    QEMU=qemu-system-x86_64
  fi
  KARCH=x86
  KARGS=""
  VMLINUX=arch/x86/boot/bzImage
  CONFIG_MPENTIUMII=y
elif [ "$TARGET" = m68k ]
then
  QEMU="qemu-system-m68k -M q800"
  KARCH=m68k
  KARGS="console=ttyS0"
  VMLINUX=vmlinux
elif [ "$TARGET" == mips ] || [ "$TARGET" == mipsel ]
then
  QEMU="qemu-system-mips -M malta"
  KARCH=mips
  KARGS="console=ttyS0"
  VMLINUX=vmlinux
  [ "$TARGET" == mipsel ] &&
    QEMU="qemu-system-mipsel -M malta"
elif [ "$TARGET" == powerpc ]
then
  KARCH=powerpc
  QEMU="qemu-system-ppc -M g3beige"
  KARGS="console=ttyS0"
  VMLINUX=vmlinux
elif [ "$TARGET" == powerpc64le ]
then
  KARCH=powerpc
  QEMU="qemu-system-ppc64 -M pseries -vga none"
  KARGS="console=/dev/hvc0"
  VMLINUX=vmlinux
elif [ "$TARGET" = s390x ]
then
  QEMU="qemu-system-s390x"
  KARCH=s390
  VMLINUX=arch/s390/boot/bzImage
elif [ "$TARGET" == sh4 ]
then
  QEMU="qemu-system-sh4 -M r2d -serial null -serial mon:stdio"
  KARCH=sh
  KARGS="console=ttySC1 noiotrap"
  VMLINUX=arch/sh/boot/zImage
else
  echo "Unknown \$TARGET"
  exit 1
fi

# Build kernel

echo "$QEMU -nographic -no-reboot -m 256" \
     "-append \"panic=1 HOST=$TARGET $KARGS\"" \
     "-kernel $(basename "$VMLINUX") -initrd ${CROSS_BASE}root.cpio.gz" \
     ${DTB:+-dtb "$(basename "$DTB")"} '"$@"' \
     > "$OUTPUT/qemu-$TARGET.sh" &&
chmod +x "$OUTPUT/qemu-$TARGET.sh" &&

if [ ! -z "$DTB" ]
then
  cp "$DTB" "$OUTPUT/$(basename "$DTB")" || exit 1
fi


cd "$ROOT"/

rm -rf init

#ln -s bin/busybox init

cp /home/qkr/remote/osc/xinit/xinit init
cp /home/qkr/remote/osc/xinit/inittab etc/inittab
#cp /home/qkr/remote/osc/goinit/goinit init
cp /home/qkr/remote/osc/gogetty/gogetty gogetty
cp /home/qkr/remote/osc/getty/getty ngetty
cp /home/qkr/remote/osc/tgetty/tgetty getty
cp /home/qkr/remote/osc/mgetty/mgetty mgetty
cp /home/qkr/remote/osc/conf/issue etc/issue

cp /lib64/ld-linux-x86-64.so.2 lib64/
cp /lib/x86_64-linux-gnu/libc.so.6 lib64/

cd -



echo === create "${CROSS_BASE}root.cpio.gz"

(cd "$ROOT" && find . | cpio -o -H newc | gzip) > \
  "$OUTPUT/${CROSS_BASE}root.cpio.gz"


